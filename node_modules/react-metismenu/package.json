{
  "_from": "react-metismenu@^1.4.0",
  "_id": "react-metismenu@1.4.0",
  "_inBundle": false,
  "_integrity": "sha512-xpXaWrcQmIOIVbR/Eg0QtqpCCCJTZwGkwaTJraSudPihPk9islH7M3Mal3NG8qiCH34qMQZjNfQMH/2Yw91yBw==",
  "_location": "/react-metismenu",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-metismenu",
    "fetchSpec": "^1.4.0",
    "name": "react-metismenu",
    "raw": "react-metismenu@^1.4.0",
    "rawSpec": "^1.4.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-metismenu/-/react-metismenu-1.4.0.tgz",
  "_shasum": "1dceb758c02f43cc66592f0a9cc6c2b6adbbeb2a",
  "_shrinkwrap": null,
  "_spec": "react-metismenu@^1.4.0",
  "_where": "/Users/pragatipant/Dropbox/ShutUp/shutup2/sdd",
  "author": {
    "email": "halpertuna@gmail.com",
    "name": "H.Alper Tuna"
  },
  "bugs": {
    "url": "https://github.com/alpertuna/react-metismenu/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "classnames": "^2.2.5",
    "prop-types": "^15.6.0",
    "react-redux": "^5.0.6",
    "redux": "^3.6.0",
    "simple-ajax": "^2.6.0"
  },
  "deprecated": false,
  "description": "A ready / simple to use, highly customizable, updateable, ajax supported, animated and material designed menu component for React",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-jest": "^21.2.0",
    "babel-loader": "^7.1.2",
    "babel-preset-es2015": "^6.24.0",
    "babel-preset-react": "^6.23.0",
    "clean-css-cli": "^4.1.10",
    "coveralls": "^3.0.0",
    "css-loader": "^0.28.7",
    "eslint": "^4.9.0",
    "eslint-config-airbnb": "^16.0.0",
    "eslint-plugin-import": "^2.8.0",
    "eslint-plugin-jsx-a11y": "^6.0.2",
    "eslint-plugin-react": "^7.4.0",
    "jest": "^21.2.1",
    "less": "^3.0.0-alpha.3",
    "less-loader": "^4.0.5",
    "less-plugin-clean-css": "^1.5.1",
    "react": "^16.0.0",
    "react-addons-test-utils": "^15.6.2",
    "react-dom": "^16.0.0",
    "react-test-renderer": "^16.0.0",
    "style-loader": "^0.19.0",
    "webpack": "^3.7.1",
    "webpack-dev-server": "^2.9.2"
  },
  "homepage": "https://github.com/alpertuna/react-metismenu#readme",
  "jest": {
    "moduleFileExtensions": [
      "js",
      "jsx"
    ],
    "testRegex": "/__tests__/.*\\.jsx?$"
  },
  "keywords": [
    "ajax",
    "animated",
    "collapsable",
    "component",
    "customizable",
    "json",
    "material",
    "menu",
    "metis",
    "react",
    "smooth"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "react-metismenu",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.9 || >=15.3.0",
    "react-dom": "^0.14.9 || >=15.3.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/alpertuna/react-metismenu.svg?branch=master)](https://travis-ci.org/alpertuna/react-metismenu)\r\n[![Coverage Status](https://coveralls.io/repos/github/alpertuna/react-metismenu/badge.svg)](https://coveralls.io/github/alpertuna/react-metismenu)\r\n[![npm version](https://badge.fury.io/js/react-metismenu.svg)](https://badge.fury.io/js/react-metismenu)\r\n[![peerDependencies Status](https://david-dm.org/alpertuna/react-metismenu/peer-status.svg)](https://david-dm.org/alpertuna/react-metismenu?type=peer)\r\n\r\n[![NPM](https://nodei.co/npm/react-metismenu.png?compact=true)](https://nodei.co/npm/react-metismenu/)\r\n\r\n# react-metismenu\r\nA ready / simple to use, highly customizable, updateable, ajax supported, animated and material designed menu component for [React](https://facebook.github.io/react/)\r\n\r\nDemo\r\n====\r\nHere is a simple demo to show animations and actions with standart theme. [Go to demo](https://alpertuna.github.io/react-metismenu/)\r\n\r\n`react-metismenu-router-link` link component to use with `react-router`. [Go to demo](https://alpertuna.github.io/react-metismenu-router-link) - [Extension Page](https://github.com/alpertuna/react-metismenu-router-link)\r\n\r\nInstall\r\n=======\r\n\r\n```console\r\nnpm install --save react-metismenu\r\n```\r\n\r\nUsage\r\n=====\r\n\r\nWith Ecma Script 6 and React Loaders\r\n```javascript\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport MetisMenu from 'react-metismenu';\r\n\r\nReactDOM.render(<MetisMenu />, document.getElementById('dom_id'));\r\n```\r\n\r\nWithout Loaders (ES5)\r\n```javascript\r\nconst React = require('react');\r\nconst ReactDOM = require('react-dom');\r\nconst MetisMenu = require('react-metismenu');\r\n\r\nReactDOM.render(\r\n    React.createElement(MetisMenu),\r\n    document.getElementById('dom_id')\r\n);\r\n```\r\n\r\nAlso you should embed core css file to your html for material design and transition effects to work.\r\n```html\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.rawgit.com/alpertuna/react-metismenu/master/dist/react-metismenu-standart.min.css\" />\r\n```\r\nYou can find this css in your `node_modules/react-metismenu/dist` to embed locally.\r\n\r\nProperties\r\n==========\r\n### MetisMenu (React Component) Properties\r\n\r\n+ Updateable Properties (by `state`)\r\n  - Properties To Set Content (See [Properties For Each Item In Content](#properties-for-each-item-in-content))\r\n    * {Object[]} [`content`=[]] - It keeps all recursive structure of Metismenu\r\n    * {string | Object[]} [`ajax`] - Url or ajax settings object to get menu as json from remote. (See [Remote Contents](#remote-contents))\r\n  - [Active Link Selectors](#active-link-selectors) (Higlights and drops down all parents if it is a submenu item)\r\n    * {boolean} [`activeLinkFromLocation`] - Automatically highlights link matched item `to` and browser location.\r\n    * {string | number} [`activeLinkId`] - Find and highlight according to item `id`.\r\n    * {string} [`activeLinkTo`] - Find and highlight according to item `to`.\r\n    * {string} [`activeLinkLabel`] - Find and highlight according to item `label`.\r\n\r\n\r\n+ Non-Updateable Properties (by `state`)\r\n  - [Customizing Styles](#customizing-styles)\r\n    * {string} [`className`] - Class name for main metismenu wrapper\r\n    * {string|func} [`classNameContainer`] - Class name or dynamic class name producer callback for item container (Affects `ul`)\r\n    * {string} [`classNameContainerVisible`] - Additional class name when container is visible (Affects `ul`)\r\n    * {string} [`classNameItem`] - Class name for items in container (Affects `li`)\r\n    * {string} [`classNameItemActive`] - Additional class name when item link is active (Affects `li`)\r\n    * {string} [`classNameItemHasActiveChild`] - Additional class name when any child or grandchild item link is active (Affects `li`)\r\n    * {string} [`classNameItemHasVisibleChild`] - Additional class name when any child or grandchild item link is visible (Affects `li`)\r\n    * {string} [`classNameLink`] - Class name for links in items (Affects `a`)\r\n    * {string} [`classNameLinkActive`] - Additional class name when link is active (Affects `a`)\r\n    * {string} [`classNameLinkHasActiveChild`] - Additional class name when any child or grandchild link is active (Affects `a`)\r\n    * {string} [`classNameIcon`] - Class name for link icons\r\n    * {string} [`classNameStateIcon`] - Class name for state indicators of submenu\r\n\r\n    * {boolean} [`noBuiltInClassNames`=false] - When true, core css class names won't be used\r\n\r\n    * {string} [`iconNamePrefix`=\"fa fa-\"] - Prefix for all icon's style class name\r\n    * {string} [`iconNameStateHidden`=\"caret-left\"] - Icon name for state of collapsed containers\r\n    * {string} [`iconNameStateVisible`=\"caret-left rotate-minus-90\"] - Icon name for state of opened containers\r\n  - [Customizing Link Component](#customizing-link-component)\r\n    * {React.Component} [`LinkComponent`=DefaultLink] - Handles link components of all items\r\n  - Event Listeners\r\n    * {callback} [`onSelected`] - Function is called when a menu is selected.\r\n  - [Using With Redux](#using-with-redux)\r\n    * {string} [`reduxStoreName`=\"metisMenuStore\"] - Redux store field name for `react-metismenu` to use\r\n    * {object} [`useExternalReduxStore`] - Created redux store\r\n\r\n### Properties For Each Item In Content\r\n* {string} [`icon`] - Icon class name of item\r\n* {string} `label` - Label of item\r\n* {string} [`to`] - Href address to link (if item has submenu, `to` property will be ignored)\r\n* {boolean} [`externalLink`] - If true link opens page in new tab/window\r\n* {Object[]} [`content`] - Sub menu of item. (For [Flat Contents](#flat-contents) you may use `id` and `parentId` properties instead.)\r\n* {string | number} [`id`] - Necessary for [Flat Contents](#flat-contents), or useful when activating a link of menu contains non-unique links. Possbile values are; not empty string, or greater than `0` if it is number.\r\n* {string | number} [`parentId`] - Necessary for [Flat Contents](#flat-contents). If item has no parent, top item, `parentId` should be falsy -one of `false`, `undefined`, `null`, empty string or number `0`, **not** string `\"0\"`.\r\n\r\n\r\n**Note for all properties**\r\n> Curly brackets {...} refers to property type.\r\n> After types, square brackets [...] means that property is optional.\r\n> Equal sign = in square brackets shows its default value.\r\n\r\nExamples\r\n========\r\n\r\n### Simple Usage\r\nSimple usage with recursive content object.\r\n```javascript\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport MetisMenu from 'react-metismenu';\r\n\r\nconst content=[\r\n    {\r\n        icon: 'icon-class-name',\r\n        label: 'Label of Item',\r\n        to: '#a-link',\r\n    },\r\n    {\r\n        icon: 'icon-class-name',\r\n        label: 'Second Item',\r\n        content: [\r\n            {\r\n                icon: 'icon-class-name',\r\n                label: 'Sub Menu of Second Item',\r\n                to: '#another-link',\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\nReactDOM.render(\r\n  <MetisMenu content={content} activeLinkFromLocation />,\r\n  document.getElementById('root')\r\n);\r\n```\r\n\r\nSee [Properties For Each Item In Content](#properties-for-each-item-in-content).\r\n\r\nSee [activeLinkFromLocation](#activelinkfromlocation) property.\r\n\r\n### Flat Contents\r\nYou may get menu content from a sql server. In this case, you can pass the content directly into `react-metismenu` without processing data. Here is flat json content example;\r\n```json\r\n[\r\n    {\r\n        \"id\": 1,\r\n        \"icon\": \"icon-class-name\",\r\n        \"label\": \"Label of Item\",\r\n        \"to\": \"#a-link\"\r\n    },\r\n    {\r\n        \"id\": 2,\r\n        \"icon\": \"icon-class-name\",\r\n        \"label\": \"Second Item\"\r\n    },\r\n    {\r\n        \"id\": 3,\r\n        \"parentId\": 2,\r\n        \"icon\": \"icon-class-name\",\r\n        \"label\": \"Sub Menu of Second Item\",\r\n        \"to\": \"#another-link\"\r\n    }\r\n]\r\n```\r\n\r\n### Remote Contents\r\nYou are able to get json content from remote. Content may be recursive or flat. `react-metismenu` uses [simple-ajax](https://www.npmjs.com/package/simple-ajax) to send ajax request. You can pass just url string or object with these [Available Options](https://www.npmjs.com/package/simple-ajax#available-options) to `ajax` prop.\r\n\r\n```javascript\r\n<MetisMenu ajax=\"/get-menu.php\" />\r\n```\r\n```javascript\r\n<MetisMenu ajax={{\r\n    url: \"/service.php\",\r\n    method: \"POST\",\r\n    data: {\r\n        \"method\": \"get-menu\",\r\n    },\r\n}} />\r\n```\r\n\r\nActive Link Selectors\r\n=====================\r\n### With Properties\r\nUsing properties make you able to update active link via `state`.\r\n\r\n##### `activeLinkFromLocation`\r\n\r\nAutomatically highlight link matched item `to` and browser location.\r\n\r\nIt tries these posibilities to match location;\r\n```javascript\r\n[\r\n  window.location.pathname + window.location.search, // /path?search\r\n  window.location.hash, // #hash\r\n  window.location.pathname + window.location.search + window.location.hash, // /path?search#hash\r\n]\r\n```\r\n\r\nUsage Example\r\n```javascript\r\n<MetisMenu activeLinkFromLocation />\r\n```\r\n\r\n##### `activeLinkId`\r\n\r\nFind and highlight according to item `id`.\r\nIt should be not empty string, or greater than `0` if it is number.\r\n\r\nUsage Example\r\n```javascript\r\n<MetisMenu activeLinkId={this.state.activeLinkId} />\r\n```\r\n\r\n##### `activeLinkTo`\r\n\r\nFind and highlight according to item `to`.\r\n\r\nUsage Example\r\n```javascript\r\n<MetisMenu activeLinkTo=\"/users\" />\r\n```\r\n\r\n##### `activeLinkLabel`\r\n\r\nFind and highlight according to item `label`.\r\n\r\nUsage Example\r\n```javascript\r\n<MetisMenu activeLinkLabel=\"User List\" />\r\n```\r\n\r\n> Note that, if you like to use more than one selector (`activeLinkTo`, `activeLinkLabel`, ...) at the same time, while setting the prop using one of them, you should set other props to `null` or `undefined`.\r\n> For example; `this.setState({ metisMenuActiveLinkId: null, metisMenuActiveLinkLabel: 'A Label' });`. Otherwise, your component may not change active link.\r\n\r\n### With Methods\r\nAlso, you can update active links with methods accessed from reference\r\n\r\n##### `changeActiveLinkFromLocation()`\r\n\r\nSame with [activeLinkFromLocation](#activelinkfromlocation) property.\r\n\r\nUsage Example\r\n```javascript\r\nclass App extends React.Component {\r\n    //...\r\n\r\n    foo() {\r\n        //...\r\n        this.refs.menu.changeActiveLinkFromLocation();\r\n        //...\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                ...\r\n                <MetisMenu ref=\"menu\" />\r\n                ...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n##### `changeActiveLinkId(id)`\r\n\r\nSame with [activeLinkId](#activelinkid) property.\r\n\r\nUsage Example\r\n```javascript\r\nclass App extends React.Component {\r\n    //...\r\n\r\n    foo() {\r\n        //...\r\n        this.refs.menu.changeActiveLinkId(3);\r\n        //...\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                ...\r\n                <MetisMenu ref=\"menu\" />\r\n                ...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n##### `changeActiveLinkTo(to)`\r\n\r\nSame with [activeLinkTo](#activelinkto) property.\r\n\r\nUsage Example\r\n```javascript\r\nclass App extends React.Component {\r\n    //...\r\n\r\n    foo() {\r\n        //...\r\n        this.refs.menu.changeActiveLinkTo('/users');\r\n        //...\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                ...\r\n                <MetisMenu ref=\"menu\" />\r\n                ...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n##### `changeActiveLinkLabel(label)`\r\n\r\nSame with [activeLinkLabel](#activelinklabel) property.\r\n\r\nUsage Example\r\n```javascript\r\nclass App extends React.Component {\r\n    //...\r\n\r\n    foo() {\r\n        //...\r\n        this.refs.menu.changeActiveLinkLabel('User List');\r\n        //...\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                ...\r\n                <MetisMenu ref=\"menu\" />\r\n                ...\r\n            </div>\r\n        );\r\n    }\r\n}\r\n```\r\n\r\nCustomizing Styles\r\n==================\r\nAfter rendering `react-metismenu` with recursive content, output dom structure will be like this;\r\n```html\r\n<div>             - main wrapper\r\n  ====================================== Top container\r\n  <ul>            - container\r\n    <li>          - item\r\n      <a>         - link\r\n        <i />     - icon\r\n        \" \"       - label\r\n        <i />     - state icon (caret icon)\r\n      </a>\r\n      ---------------------------------- First depth sub container\r\n      <ul>        - container\r\n        <li>      - item\r\n          <a>     - link\r\n            <i /> - icon\r\n            \" \"   - label\r\n          </a>\r\n        </li>\r\n        ...\r\n      </ul>\r\n      ----------------------------------\r\n    </li>\r\n    ...\r\n  </ul>\r\n  ======================================\r\n</div>\r\n```\r\n\r\n#### Overriding Styles\r\nMetismenu with default setting adds built-in css class names.\r\n\r\nThese class names are, according to figure above;\r\n- main wrapper - `metismenu`\r\n- container - `metismenu-container` and `visible` for opened containers\r\n- item - `metismenu-item`\r\n- link - `metismenu-link`, `active` for active links, and `has-active-child` for links has active child or grandchild\r\n- icon - `metismenu-icon`\r\n- state icon - `metismenu-state-icon`\r\n\r\nYou can overide these class names to customize with your own css.\r\n\r\n**Note:** Containers' default state is hidden and there is no assigned class to tell.\r\n\r\n#### Using Your Own Class Names\r\nYou can tell metismenu to add your own class names by sending them as props.\r\n\r\nProperty names are, according to figure above;\r\n- main wrapper - `className`\r\n- container - `classNameContainer` and `classNameContainerVisible` for opened containers\r\n- item - `classNameItem`, `classNameItemActive` for active items, and `classNameItemHasActiveChild` for items has active child or grandchild\r\n- link - `classNameLink`, `classNameLinkActive` for active links, and `classNameLinkHasActiveChild` for links has active child or grandchild\r\n- icon - `classNameIcon`\r\n- state icon - `classNameStateIcon`\r\n\r\nUsing these props **not** overwrites built-in class names, just appends.\r\n\r\n**Note:** Containers' default state is hidden and there is no prop to tell.\r\n\r\n#### Not Using Built-in Styles\r\nIf you don't want use core styles you can remove them completely by setting `noBuiltInClassNames` prop `true`.\r\nIn this case you are responsable for all styling including visibility states of containers.\r\n\r\n#### Icon Framework\r\nBy default, metismenu uses [Font Awesome](http://fontawesome.io/) for icons and prepends all icon names with `fa fa-`.\r\n\r\nTo use another icon framework, you can change prefix with `iconNamePrefix` prop.\r\n\r\nTo change state icons (shows submenu is visible or not) you can use these props;\r\n- `iconNameStateVisible`\r\n- `iconNameStateHidden`\r\n\r\nThese icons are also prepended by `iconNamePrefix`.\r\n\r\n### Customizing Style Example\r\n```javascript\r\n<MetisMenu\r\n  className=\"my-menu\"\r\n  clasNameLink=\"my-menu-link\"\r\n  iconNameStateVisible=\"minus\"\r\n  iconNameStateHidden=\"plus\"\r\n/>\r\n```\r\n\r\n\r\nCustomizing Link Component\r\n==========================\r\nYou are able to change the link component of each item.\r\nYou may use another html tag, want to inject some properties or change operation logic. In this case, you can customize and use your own link component sending to `react-metismenu` component as `LinkComponent` property.\r\n\r\n#### Props to use in your Link Component\r\n- {string} `className` - Passes built-in class name and `classNameLink` prop of top component\r\n- {string} `classNameActive` - Passes built-in class name and `classNameLinkActive` prop of top component\r\n- {string} `classNameHasActiveChild` - Passes built-in class name and `classNameLinkHasActiveChild` prop of top component\r\n- {boolean} `active` - Active link or not state\r\n- {boolean} `hasActiveChild` - Has active child or grand child state\r\n- {boolean} `hasSubMenu` - Has sub menu or not state\r\n- {function} `toggleSubMenu` - If item has submenu, toggle sub menu callback. Otherwise dead function.\r\n- {function} `activateMe` - If it is normal link, callback that activates link (to assign active class name) and makes all parents beware they have active link. Also triggers `onSelected` and given parameters are passed to listener.\r\n- {string} [`to`] - Contains `to` info of the item comes from menu content object\r\n- {boolean} [`externalLink`] - Destination is external or not\r\n- {React.Component} `children` -  Ready to render content of link - contains icon, label and other stuff\r\n\r\n#### An Example\r\nDefining CustomLink Component\r\n```javascript\r\nclass CustomLink extends React.Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  onClick(e) {\r\n    if (this.props.hasSubMenu) this.props.toggleSubMenu(e);\r\n    else {\r\n      /*\r\n       * your own operation using \"to\"\r\n       * myGotoFunc(this.props.to);\r\n       * or\r\n       * this.props.activateMe(/* Parameters to pass \"onSelected\" event listener */);\r\n       */\r\n\r\n      this.props.activateMe({\r\n        newLocation: this.props.to,\r\n        selectedMenuLabel: this.props.label,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button className=\"metismenu-link\" onClick={this.onClick}>\r\n        {this.props.children}\r\n      </button>\r\n    );\r\n  }\r\n};\r\n```\r\nInjecting CustomLink into Menu component\r\n```javascript\r\n<Menu content={menu} LinkComponent={CustomLink} />\r\n```\r\nAlso, as another example, you can look into [DefaultLink Component](https://github.com/alpertuna/react-metismenu/blob/master/src/components/DefaultLink.jsx) source.\r\n\r\nUsing With Redux\r\n================\r\n`react-metismenu` uses Redux and if you also use Redux in your application, `Provider`s will confilict.\r\nThat's why you should pass your store using `useExternalReduxStore` prop.\r\nIn this case, `react-metismenu` will use your application's `Provider`.\r\n\r\n**An example application;**\r\n```javascript\r\nimport { createStore, combineReducers } from 'redux';\r\nimport MetisMenu from 'react-metismenu';\r\nimport metisMenuReducer from 'react-metismenu/lib/reducers';\r\n\r\nconst reducers = combineReducers({\r\n    yourStore: yourReducers,\r\n    // Your other reducer assignments...\r\n    metisMenuStore: metisMenuReducer, // Here \"metisMenuStore\" is default and it can be changed with \"reduxStoreName\" prop\r\n});\r\nconst store = createStore(reducers, {\r\n    yourStore: { // This name should be the same with above you assigned your reducer\r\n        // Your application state\r\n    },\r\n   // Your other initial states...\r\n   // There is no need to initalize \"metisMenuStore\"\r\n});\r\n\r\n<MetisMenu ... useExternalReduxStore={store} />\r\n```\r\nYou can also use multiple react-metismenu with same external store\r\n\r\nExtensions\r\n==========\r\n## react-metismenu-router-link\r\nIf you use `react-router`, this extension does the job. It provides link component to use `react-metismenu` with `react-router`.\r\n- Npm package `react-metismenu-router-link`\r\n- [Source page](https://github.com/alpertuna/react-metismenu-router-link)\r\n- [Demo page](https://alpertuna.github.io/react-metismenu-router-link)\r\n\r\nDevelopment / Contributing\r\n==========================\r\nIf you like to add or improve something, follow these steps.\r\n\r\n```console\r\n# Change dir to your playground folder and clone repository.\r\ngit clone git@github.com:alpertuna/react-metismenu.git\r\n\r\n# Enter cloned folder and install necessary development node libraries\r\ncd react-metismenu\r\nnpm install\r\n```\r\n\r\n#### Folders and Files\r\n - **`src`** folder keeps all source files of `react-metismenu`\r\n - **`less`** folder keeps source style files.\r\n - **`dev`** is playground folder to develop `react-metismenu`.\r\n\r\nUnder **`dev`** folder, `index.html` is index file of our web server. You don't need to touch here if you don't want to add any other external js or css files.\r\n`App.js` file is entry point for our react application, and you can test your alterations in here. There is a working example in `App.js` and it imports `react-metismenu` directly from source code, that's why there is no need to build it while developing. Similarly less folder is imported directly through less compiler pipe.\r\n\r\n#### To run dev server,\r\n```console\r\nnpm run dev-server\r\n# or shortly\r\nnpm start\r\n```\r\nAnd open `localhost:8080` in browser.\r\nDev server uses webpack and it has hot modul replecament plugins, so when you change and save any source file, it will rebuild virtual bundle and send signal browser to refresh page automaticly.\r\n\r\n#### Source Code Writing Standarts\r\nFor source code quality, I applied Airbnb rules. Because it focuses on React more than others.\r\n\r\n#### After Develop,\r\n```console\r\n# TESTING\r\n# Runs all necessary test scripts (linting and unit-testing)\r\nnpm test\r\n\r\n# Or you can test specific parts of project\r\n# Lints js files according to Airbnb rules using Eslint\r\nnpm run lint-confs\r\nnpm run lint-src\r\nnpm run lint-dev\r\n# Runs unit test using Jest\r\nnpm run unit-test\r\n\r\n# BUILDING\r\n# Builds lib and dist files together\r\nnpm run build\r\n\r\n# Or you can build them seperately\r\n# Builds js and css dist files\r\nnpm run build-dist-js\r\nnpm run build-dist-js-min\r\nnpm run build-dist-css\r\nnpm run build-dist-css-min\r\n# Builds lib files for npm\r\nnpm run build-lib\r\n```\r\n\r\n> You can correct typos or improve meanings in documents as well as contributing code.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/alpertuna/react-metismenu.git"
  },
  "scripts": {
    "_test": "npm run lint-confs && npm run lint-src && npm run coverage",
    "build": "npm run build-lib && npm run build-dist",
    "build-demo": "rm -rf demo && mkdir demo && cp dev/{index.html,style.css} demo && webpack --config webpack/demo.conf.js --progress --colors",
    "build-dist": "rm -rf dist && npm run build-dist-js && npm run build-dist-js-min && npm run build-dist-css && npm run build-dist-css-min",
    "build-dist-css": "lessc less/standart.less dist/react-metismenu-standart.css",
    "build-dist-css-min": "cleancss -o dist/react-metismenu-standart.min.css dist/react-metismenu-standart.css",
    "build-dist-js": "webpack --config webpack/dist.conf.js --progress --colors",
    "build-dist-js-min": "webpack --config webpack/dist-min.conf.js --progress --colors",
    "build-lib": "rm -rf lib && babel src -d lib",
    "coverage": "jest --coverage",
    "coveralls": "coveralls < coverage/lcov.info",
    "dev-server": "webpack-dev-server --config webpack/dev.conf.js --progress --colors --hot --inline",
    "lint-confs": "eslint webpack __tests__ --ext=jsx --ext=js",
    "lint-dev": "eslint dev --ext=jsx --ext=js",
    "lint-src": "eslint src --ext=jsx --ext=js",
    "start": "npm run dev-server",
    "test": "npm run lint-src && npm run coverage",
    "unit-test": "jest"
  },
  "version": "1.4.0"
}
